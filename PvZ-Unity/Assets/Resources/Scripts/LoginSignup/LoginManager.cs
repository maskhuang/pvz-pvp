using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Networking;
using System.Collections;
using TMPro;
using UnityEngine.SceneManagement;

public class LoginManager : MonoBehaviour
{
    // 将 Inspector 中对应的 UI 控件拖入这些变量
    public TMP_InputField usernameInput;
    public TMP_InputField passwordInput;
    public Button loginBotton;
    public Button toSignUpScene;
    public Text messageText;

    // 服务器 API 接口地址（替换成你实际部署的地址）
    private string loginUrl = "http://localhost:3000/api/login";

    // 当点击登录按钮时调用
    public void OnLoginButtonClicked()
    {
        string username = usernameInput.text;
        string password = passwordInput.text;

        // 简单非空验证
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            messageText.text = "用户名和密码不能为空";
            return;
        }

        // 调用协程进行登录
        StartCoroutine(LoginRoutine(username, password));
    }

    public void OnToSignUpSceneClicked()
    {
        SceneManager.LoadScene("Signup_Scene");
    }

    // 利用 UnityWebRequest 发送 POST 请求到服务器进行验证
    IEnumerator LoginRoutine(string username, string password)
    {
        WWWForm form = new WWWForm();
        form.AddField("username", username);
        form.AddField("password", password);

        using (UnityWebRequest www = UnityWebRequest.Post(loginUrl, form))
        {
            // 等待请求完成
            yield return www.SendWebRequest();

            // 后端返回的原始响应内容（无论成功或失败）
            string rawResponse = www.downloadHandler.text;

            // 判断 HTTP 请求本身是否成功（状态码 200~299）
            if (www.result == UnityWebRequest.Result.Success)
            {
                // 请求成功，尝试解析 JSON
                LoginResponse response = JsonUtility.FromJson<LoginResponse>(rawResponse);
                if (response.success)
                {
                    messageText.text = "登录成功！";
                    // 跳转到主场景或执行后续逻辑
                    SceneManager.LoadScene("Main_Scene");
                }
                else
                {
                    // 即使是 200 状态码，服务端也可能返回 { success=false, message=... }
                    messageText.text = "登录失败: " + response.message;
                }
            }
            else
            {
                // 其他状态码（401、400、500等）
                // 仍尝试解析 JSON，看是否能获取后端返回的详细错误
                try
                {
                    LoginResponse response = JsonUtility.FromJson<LoginResponse>(rawResponse);
                    // 如果成功解析到 { success=false, message="..." }
                    messageText.text = "登录失败: " + response.message;
                }
                catch
                {
                    // 如果解析失败，只能显示最简单的错误提示
                    messageText.text = "请求失败: " + www.error;
                }
            }
        }
    }
}

// 对应服务器返回的数据结构，需要与服务器返回的 JSON 格式保持一致
[System.Serializable]
public class LoginResponse
{
    public bool success;
    public string message;
}
